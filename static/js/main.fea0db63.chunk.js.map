{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","console","log","cardComp","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","searchField","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+MAeeA,EAbF,SAACC,GACb,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAAMI,MACtD,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,MAAV,QCUWC,EAdE,SAACC,GACjBC,QAAQC,IAAIF,GACZ,IAAMG,EAAWH,EAAOA,OAAOI,KAAI,SAACC,EAAKC,GACxC,OAAO,kBAAC,EAAD,CAAMC,IAAKP,EAAOA,OAAOM,GAAGV,GAAIA,GAAII,EAAOA,OAAOM,GAAGV,GAAIC,KAAMG,EAAOA,OAAOM,GAAGT,KAAMC,MAAOE,EAAOA,OAAOM,GAAGR,WAGtH,OACC,6BAEEK,ICDWK,EAVE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAElB,OACC,yBAAKhB,UAAU,OACd,2BAAOiB,KAAK,SAASC,YAAc,gBACnCC,SAAUH,MCPAT,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,gBACNgB,SAAU,OACVf,MAAO,qBAGT,CACEF,GAAI,EACJC,KAAM,eACNgB,SAAU,YACVf,MAAO,qBAGT,CACEF,GAAI,EACJC,KAAM,mBACNgB,SAAU,WACVf,MAAO,sBAGT,CACEF,GAAI,EACJC,KAAM,mBACNgB,SAAU,WACVf,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNgB,SAAU,SACVf,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNgB,SAAU,mBACVf,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNgB,SAAU,eACVf,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNgB,SAAU,gBACVf,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNgB,SAAU,WACVf,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNgB,SAAU,iBACVf,MAAO,2BCvBIgB,E,kDA9Bd,aAAc,IAAD,8BACZ,gBAODC,eAAgB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAPxC,EAAKC,MAAM,CACVrB,OAASA,EACTkB,YAAc,IAJH,E,qDAeZ,IAAD,OACOI,EAAiBC,KAAKF,MAAMrB,OAAOwB,QAAO,SAAAxB,GAChD,OAAOA,EAAOH,KAAK4B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAGjE,OACC,yBAAKhC,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWgB,aAAgBc,KAAKR,iBAChC,kBAAC,EAAD,CAAUf,OAAQsB,S,GA1BJK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACR,kBAAC,EAAD,MAAOC,SAASC,eAAe,SDwH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.fea0db63.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src= {`https://robohash.org/${props.id}`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email} </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n} \r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n// import {robots} from './robots';\r\n\r\nconst CardList = (robots) => {\r\n\tconsole.log(robots);\r\n\tconst cardComp = robots.robots.map((user,i) =>{\r\n\t\treturn <Card key={robots.robots[i].id} id={robots.robots[i].id} name={robots.robots[i].name} email={robots.robots[i].email} />\r\n\t\t\r\n\t})\r\n\treturn(\r\n\t\t<div >\r\n\t\t\t\r\n\t\t\t{cardComp}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange})=>{\r\n\t\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input type='search' placeholder = 'search robots'\r\n\t\t\tonChange={searchChange}/>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz',\r\n  },\r\n    \r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv',\r\n    \r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net',\r\n    \r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React,{ Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport {robots} from './robots';\r\n\r\n\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots : robots,\r\n\t\t\tsearchField : ''\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange= (event) =>{\r\n\t\tthis.setState({searchField:event.target.value});\r\n\r\n\t\t\r\n\t} \r\n\r\n\trender()\r\n\t{    \r\n\t\tconst filteredRobots = this.state.robots.filter(robots=>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n  \r\n\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import CardList from './CardList';\n// import Card from './Card';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(\n\t<App/>,document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}